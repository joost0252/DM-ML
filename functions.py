# -*- coding: utf-8 -*-
"""Functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ob-W_iSOkp_rpt1dHRajd27NpSXKIEbV
"""

from sklearn.preprocessing import OrdinalEncoder
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import pandas as pd
import numpy as np

def evaluate(true, pred):
    precision = precision_score(true, pred, average='weighted')
    recall = recall_score(true, pred,average='weighted')
    f1 = f1_score(true, pred, average='weighted')
    print(f"CONFUSION MATRIX:\n{confusion_matrix(true,pred)}")
    print(f"ACCURACY SCORE:\n{accuracy_score(true, pred):.4f}")
    print(f"CLASSIFICATION REPORT:\n\tPrecision: {precision:.4f}\n\tRecall: {recall:.4f}\n\tF1_Score: {f1:.4f}")

def encode_difficulty(corpus):
  oe = OrdinalEncoder()
  oe.set_params(categories= [['A1', 'A2', 'B1', 'B2', 'C1', 'C2']])

  oe_difficulty = oe.fit_transform(corpus[['difficulty']])
  corpus['difficulty'] = pd.DataFrame(oe_difficulty).astype('int')
  return corpus

def prepare_submission(df):
  df['difficulty'] = df['difficulty'].astype('category').cat.rename_categories(["A1", "A2", "B1", "B2", "C1", "C2"])
  predictions = df.drop(columns=["sentence"])
  return predictions

def get_prediction_probabilities(pipe, df):
  probability_class = np.max(pipe.predict_proba(df['sentence']), axis=1)
  print("Minimum value:", pd.array(probability_class).min().round(2))
  print("Maximum value:", pd.array(probability_class).max().round(2))
  return probability_class